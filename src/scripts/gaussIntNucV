#!/usr/bin/env perl

##################################################################
#
# Author: Ben Walker
#
# This program computes the solution formulas for 3-center nuclear
# attraction integrals.  The integral solutions are elements of a 
# 20x20 matrix, and orbital overlap contributions are stored in a 
# 16x16 matrix.  Positions 1 and 2 involve s-,  p-, d-, 
# or f-type orbitals, while the third (nuclear) position 
# is an s-type Gaussian function.  This formalism is readily 
# extendable to orbitals higher than f-type (g-type orbitals, etc.).
# The azimuthal quantum numbers are arranged according to the 
# "triad" formalism established by Browne & Poshusta in 1962, 
# the reference for which is the following:
# 
# ****************************************************************
# Browne JC, Poshusta RD., "Quantum-Mechanical Integrals 
# over Gaussian Atomic Orbitals.", The Journal of Chemical Physics, 
# Vol. 36, Iss. 7, P. 19337, (1962).
# ****************************************************************
#
# The formalism for the solution to the integrals comes from the
# following source:
#
# ****************************************************************
# Cook, David B., "Handbook of Computational Quantum Chemistry."
# Dover Publications (August 22, 2005).
# ISBN-10: 0486443078
# ISBN-13: 978-0486443072
# ****************************************************************
#
# The output of this program is the integral solutions in
# the form of Fortran 90 code, which is to be used in OLCAO.
##################################################################

##################################################################
# Use necessary modules
##################################################################
use strict;
use warnings;
use Env;
use POSIX;

##################################################################
# Begin main program
##################################################################
my @eTriad;
my @tg;
&printNuc;
##################################################################
# End main program
##################################################################

##################################################################
# Define subroutines
##################################################################

# This subroutine initializes the triads that are to represent
# the types of orbitals.
sub triads {
  # Initialize the triads
  @{$eTriad[1]}  = qw(0 0 0); # s
  @{$eTriad[2]}  = qw(1 0 0); # x
  @{$eTriad[3]}  = qw(0 1 0); # y
  @{$eTriad[4]}  = qw(0 0 1); # z
  @{$eTriad[5]}  = qw(2 0 0); # xx
  @{$eTriad[6]}  = qw(0 2 0); # yy
  @{$eTriad[7]}  = qw(0 0 2); # zz
  @{$eTriad[8]}  = qw(1 1 0); # xy
  @{$eTriad[9]}  = qw(1 0 1); # xz
  @{$eTriad[10]} = qw(0 1 1); # yz
  @{$eTriad[11]} = qw(1 1 1); # xyz
  @{$eTriad[12]} = qw(2 1 0); # xxy
  @{$eTriad[13]} = qw(2 0 1); # xxz
  @{$eTriad[14]} = qw(1 2 0); # yyx
  @{$eTriad[15]} = qw(0 2 1); # yyz
  @{$eTriad[16]} = qw(1 0 2); # zzx
  @{$eTriad[17]} = qw(0 1 2); # zzy
  @{$eTriad[18]} = qw(3 0 0); # xxx
  @{$eTriad[19]} = qw(0 3 0); # yyy
  @{$eTriad[20]} = qw(0 0 3); # zzz
  #@{$eTriad[21]} = qw(0 1 3);
  #@{$eTriad[22]} = qw(0 3 1);
  #@{$eTriad[23]} = qw(1 0 3);
  #@{$eTriad[24]} = qw(1 3 0);
  #@{$eTriad[25]} = qw(3 0 1);
  #@{$eTriad[26]} = qw(3 1 0);
  #@{$eTriad[27]} = qw(4 0 0);
  #@{$eTriad[28]} = qw(0 4 0);
  #@{$eTriad[29]} = qw(0 0 4);
  #@{$eTriad[30]} = qw(1 1 2);
  #@{$eTriad[31]} = qw(1 2 1);
  #@{$eTriad[32]} = qw(2 1 1);
}

# This subroutine defines the array values needed
# to generate g(16,16) expressions.
sub gNums { 
  # Initialize the triads
  @{$tg[1]} = qw(1 1 0 1 0 1);
  @{$tg[2]} = qw(1 2 0 1 0 1);
  @{$tg[3]} = qw(1 3 0 1 0 1);
  @{$tg[4]} = qw(1 4 0 1 0 1);
  @{$tg[5]} = qw(1 8 0 1 0 1);
  @{$tg[6]} = qw(1 9 0 1 0 1);
  @{$tg[7]} = qw(1 10 0 1 0 1);
  @{$tg[8]} = qw(1 5 -1 6 0 1);
  @{$tg[9]} = qw(2 7 -1 5 -1 6);
  @{$tg[10]} = qw(1 11 0 1 0 1);
  @{$tg[11]} = qw(1 13 -1 15 0 1);
  @{$tg[12]} = qw(1 18 -3 14 0 1);
  @{$tg[13]} = qw(3 12 -1 19 0 1);
  @{$tg[14]} = qw(2 20 -3 13 -3 15);
  @{$tg[15]} = qw(4 16 -1 18 -1 14);
  @{$tg[16]} = qw(4 17 -1 12 -1 19);
}

# This subroutine calculates binomial coefficients
sub choose {
  # Define passed parameters
  my $n = $_[0];
  my $k = $_[1];    # These are for "n choose k"

  # Define local variables
  my $l;
  my $returnValue;
  $returnValue = 1;
  foreach $l (1..$k) {
    $returnValue *= ($n - $l + 1)/$l;
  }
  return $returnValue;
}

# This subroutine computes the factorial (x!)
# of a positive integer passed to it.
sub factorial {
  # Define passed parameters
  my $inputNum = $_[0];

  # Define local variables
  my $i;
  my $returnValue;

  $returnValue = 1;

  if ($inputNum == 0 or $inputNum == 1) {
    return $returnValue;  
  }
  else {
    for ($i=1;$i<=$inputNum;$i++) {
      $returnValue *= $i;
    }
  }
  return $returnValue;
}

# This subroutine generates the g(16,16) orbital overlap
# expressions as follows:
# ****************************************************************
# Set up tg(16,16) values.  tg(:,1), tg(:,3), tg(:,5) are coefficients
# and tg(:,2), tg(:,4), tg(:,6) are wo(20,20,20,20) index values.
# ****************************************************************
# REFERENCE FOR (20,20) AND (16,16) MATRIX ELEMENTS
# THIS IS AS THEY ARE DEFINED IN OLCAO.
# ****************************************************************
# 
# g(16,16): 1,s; 2,x; 3,y; 4,z; 5,xy; 6,xz; 7,yz; 8,xx-yy;
# 9,2zz-xx-yy; 10,xyz; 11,xxz-yyz; 12,xxx-3yyx; 13,3xxy-yyy; 
# 14,2zzz-3xxz-3yyz; 15,4zzx-xxx-yyx; 16,4zzy-xxy-yyy
# 
# wo(20,20): 1,s; 2,x; 3,y; 4,z; 5,xx; 6,yy; 7,zz; 8,xy; 9,xz;
# 10,yz; 11,xyz; 12,xxy; 13,xxz; 14,yyx; 15,yyz; 16,zzx; 17,zzy
# 18,xxx; 19,yyy; 20,zzz
# 
# ****************************************************************
sub g_gen {
  # Define passed parameters.
  my $orb1 = $_[0];
  my $orb2 = $_[1];
  # Define local variables.
  my @tg1;
  my @tg2;
  my $orbital1;
  my $orbital2;
  my $total;
  my $temp;
  my $string = "";
  my $string1 = "";
  my $string2 = "";
  my $string3 = "";
  my $string4 = "";
  my $string5 = "";
  my $string6 = "";
  my $string7 = "";
  my $string8 = "";
  my $string9 = "";
  
  # Initialize arrays.
  &gNums;

  foreach $orbital2 (1..$orb2) {
    foreach $orbital1 (1..$orb1) {
      @tg1[0..5] = @{$tg[$orbital1]};
      @tg2[0..5] = @{$tg[$orbital2]};
      $string .= "g($orbital1,$orbital2) = ";
      if ($tg1[0]*$tg2[0] == 0) {
        $string1 = "0";
        $string .= $string1;
        $string .= " + ";
      }
      else {
        $string1 = $tg1[0]*$tg2[0];
        $string1 .= "*wo(";
        $string1 .= $tg1[1];
        $string1 .= ",";
        $string1 .= $tg2[1];
        $string1 .= ")";
        $string .= $string1;
        $string .= " + ";
      }
      if ($tg1[0]*$tg2[2] == 0) {
        $string2 = "0";
        $string .= $string2;
        $string .= " + ";
      }
      else {
        $string2 = $tg1[0]*$tg2[2];
        $string2 .= "*wo(";
        $string2 .= $tg1[1];
        $string2 .= ",";
        $string2 .= $tg2[3];
        $string2 .= ")";
        $string .= $string2;
        $string .= " + ";
      }
      if ($tg1[0]*$tg2[4] == 0) {
        $string3 = "0";
        $string .= $string3;
        $string .= " + ";
      }
      else {
        $string3 = $tg1[0]*$tg2[4];
        $string3 .= "*wo(";
        $string3 .= $tg1[1];
        $string3 .= ",";
        $string3 .= $tg2[5];
        $string3 .= ")";
        $string .= $string3;
        $string .= " + ";
      }
      if ($tg1[2]*$tg2[0] == 0) {
        $string4 = "0";
        $string .= $string4;
        $string .= " + ";
      }
      else {
        $string4 = $tg1[2]*$tg2[0];
        $string4 .= "*wo(";
        $string4 .= $tg1[3];
        $string4 .= ",";
        $string4 .= $tg2[1];
        $string4 .= ")";
        $string .= $string4;
        $string .= " + ";
      }
      if ($tg1[2]*$tg2[2] == 0) {
        $string5 = "0";
        $string .= $string5;
        $string .= " + ";
      }
      else {
        $string5 = $tg1[2]*$tg2[2];
        $string5 .= "*wo(";
        $string5 .= $tg1[3];
        $string5 .= ",";
        $string5 .= $tg2[3];
        $string5 .= ")";
        $string .= $string5;
        $string .= " + ";
      }
      if ($tg1[2]*$tg2[4] == 0) {
        $string6 = "0";
        $string .= $string6;
        $string .= " + ";
      }
      else {
        $string6 = $tg1[2]*$tg2[4];
        $string6 .= "*wo(";
        $string6 .= $tg1[3];
        $string6 .= ",";
        $string6 .= $tg2[5];
        $string6 .= ")";
        $string .= $string6;
        $string .= " + ";
      }
      if ($tg1[4]*$tg2[0] == 0) {
        $string7 = "0";
        $string .= $string7;
        $string .= " + ";
      }
      else {
        $string7 = $tg1[4]*$tg2[0];
        $string7 .= "*wo(";
        $string7 .= $tg1[5];
        $string7 .= ",";
        $string7 .= $tg2[1];
        $string7 .= ")";
        $string .= $string7;
        $string .= " + ";
      }
      if ($tg1[4]*$tg2[2] == 0) {
        $string8 = "0";
        $string .= $string8;
        $string .= " + ";
      }
      else {
        $string8 = $tg1[4]*$tg2[2];
        $string8 .= "*wo(";
        $string8 .= $tg1[5];
        $string8 .= ",";
        $string8 .= $tg2[3];
        $string8 .= ")";
        $string .= $string8;
        $string .= " + ";
      }
      if ($tg1[4]*$tg2[4] == 0) {
        $string9 = "0";
        $string .= $string9;
      }
      else {
        $string9 = $tg1[4]*$tg2[4];
        $string9 .= "*wo(";
        $string9 .= $tg1[5];
        $string9 .= ",";
        $string9 .= $tg2[5];
        $string9 .= ")";
        $string .= $string9;
      }

      #**************************************************************
      # Start RegEXP portion here
      #**************************************************************
      # Eliminate redundant mathematical operations
      if ($string =~ m/\+ -/) {
        $string =~ s/\+ -/- /g;
      }
      if ($string =~ m/ 1\*/) {
        $string =~ s/ 1\*/ /g;
      }
      # Eliminate zero terms
      if ($string =~ m/ \+ 0/) {
        $string =~ s/ \+ 0//g;
      }
      #**************************************************************
      # End of RegEXP portion
      #**************************************************************

      # Now, process the output string into 80 character-long lines.
      my $portion = "";
      my $initial = 0;
      my $final = 78;
      if (length($string) > 1) {
        while ($final < length($string)) {
          $portion .= substr($string, $initial, 79);
          $portion .= "&\n";
          $portion .= "&";
          $initial += 79;
          $final += 79;
        }
        $portion .= substr($string, $initial, length($string));
      }
      $portion .= "\n\n";
      print PRI $portion;
      $string = ""; # Reset the string before starting the loops again to prevent
                    # the solutions from concatonating onto each other.
    }
  }
  return $string;
}

# This subroutine constructs the nuclear potential
# integral solution.
sub nucOverlap {
  # Define passed parameters
  my $orb1 = $_[0];
  my $orb2 = $_[1];

  # Define local variables
  my @eTriad1;
  my @eTriad2;
  my $orbital1;
  my $orbital2;
  my $l1;
  my $l2;
  my $m1;
  my $m2;
  my $n1;
  my $n2;
  my $l;
  my $m;
  my $n;
  my $r;
  my $s;
  my $t;
  my $i;
  my $j;
  my $k;
  my $u;
  my $v;
  my $w;
  my $N;
  my $string = "";

  &triads; # Initialize triads

  foreach $orbital2 (1..$orb2) {
    foreach $orbital1 (1..$orb1) {
      @eTriad1[0..2] = @{$eTriad[$orbital1]};
      @eTriad2[0..2] = @{$eTriad[$orbital2]};
      $string .= "wo($orbital1,$orbital2) = ";
      $string .= "coef*("; # Outer enclosing paren
      $l1 = $eTriad1[0];
      $l2 = $eTriad2[0];
      $m1 = $eTriad1[1];
      $m2 = $eTriad2[1];
      $n1 = $eTriad1[2];
      $n2 = $eTriad2[2];
      my $num1;
      my $num2;
      my $num3;
      my $num4;
      my $num5;
      my $num6;
      my $num7;
      my $num8;
      my $num9;
      my $num10;
      my $num11;
      my $num12;
      foreach $l (0..($l1 + $l2)) {
        foreach $r (0..floor($l/2)) {
          foreach $i (0..floor(($l - 2*$r)/2)) {
            foreach $m (0..($m1 + $m2)) {
              foreach $s (0..floor($m/2)) {
                foreach $j (0..floor(($m - 2*$s)/2)) {
                  foreach $n (0..($n1 + $n2)) {
                    foreach $t (0..floor($n/2)) {
                      foreach $k (0..floor(($n - 2*$t)/2)) {
                        foreach $u (0..$l) {
                          foreach $v (0..$m) {
                            foreach $w (0..$n) {
                              if (&choose($l1,$u)*&choose($l2,($l - $u)) == 0
                                  or &choose($m1,$v)*&choose($m2,($m - $v)) == 0
                                  or &choose($n1,$w)*&choose($n2,($n - $w)) == 0) {
                                $string .= "(0)";
                              }
                              else {
                                $num1 = $l1 - $u;
                                $num2 = $l2 - $l + $u;
                                $num3 = $l - 2*$r - 2*$i;
                                $num4 = $r + $i;
                                $num5 = $m1 - $v;
                                $num6 = $m2 - $m + $v;
                                $num7 = $m - 2*$s - 2*$j;
                                $num8 = $s + $j;
                                $num9 = $n1 - $w;
                                $num10 = $n2 - $n + $w;
                                $num11 = $n - 2*$t - 2*$k;
                                $num12 = $t + $k;
                                $N = $l + $m + $n - 2*($r + $s + $t) - ($i + $j + $k);
                                $string .= ((-1)**($l+$m+$n+$i+$j+$k))*&choose($l1,$u)
                                  *&choose($l2,($l - $u))*&choose($m1,$v)*&choose($m2,($m - $v))
                                  *&choose($n1,$w)*&choose($n2,($n - $w))*&factorial($l)
                                  *&factorial($m)*&factorial($n)/(&factorial($i)*&factorial($j)
                                  *&factorial($k)*&factorial($r)*&factorial($s)*&factorial($t)
                                  *&factorial($l-2*$r-2*$i)*&factorial($m-2*$s-2*$j)
                                  *&factorial($n-2*$t-2*$k));
                                $string .= "*(PA(1)**$num1)*(PB(1)**$num2)*(PC(1)**$num3)";
                                $string .= "*(PA(2)**$num5)*(PB(2)**$num6)*(PC(2)**$num7)";
                                $string .= "*(PA(3)**$num9)*(PB(3)**$num10)*(PC(3)**$num11)";
                                $string .= "*(eps**";
                                $string .= $num4 + $num8 + $num12;
                                $string .= ")";
                                $string .= "*F(";
                                $string .= $N + 1;
                                $string .= ")";
                              }
                              if ($l != ($l1 + $l2) 
                                  or $r != (floor($l/2)) 
                                  or $i != (floor(($l - 2*$r)/2)) 
                                  or $u != $l 
                                  or $m != ($m1 + $m2)
                                  or $s != (floor($m/2))
                                  or $j != (floor(($m - 2*$s)/2))
                                  or $v != $m
                                  or $n != ($n1 + $n2)
                                  or $t != (floor($n/2))
                                  or $k != (floor(($n - 2*$t)/2))
                                  or $w != $n) {
                                    $string .= " + ";
                                }
                              else {
                                $string .= "";
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      $string .= ")"; # Outer enclosing paren
            
      #**************************************************************
      # Start RegEXP portion here
      #**************************************************************

      # Get rid of terms that are 1
      if ($string =~ m/\(PA\(1\)\*\*0\)/) {
        $string =~ s/\(PA\(1\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PB\(1\)\*\*0\)/) {
        $string =~ s/\(PB\(1\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PC\(1\)\*\*0\)/) {
        $string =~ s/\(PC\(1\)\*\*0\)/1/g;
      }

      if ($string =~ m/\(PA\(2\)\*\*0\)/) {
        $string =~ s/\(PA\(2\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PB\(2\)\*\*0\)/) {
        $string =~ s/\(PB\(2\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PC\(2\)\*\*0\)/) {
        $string =~ s/\(PC\(2\)\*\*0\)/1/g;
      }

      if ($string =~ m/\(PA\(3\)\*\*0\)/) {
        $string =~ s/\(PA\(3\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PB\(3\)\*\*0\)/) {
        $string =~ s/\(PB\(3\)\*\*0\)/1/g;
      }
      if ($string =~ m/\(PC\(3\)\*\*0\)/) {
        $string =~ s/\(PC\(3\)\*\*0\)/1/g;
      }

      if ($string =~ m/\(eps\*\*0\)/) {
        $string =~ s/\(eps\*\*0\)/1/g;
      }
      
      # Simplify terms to the 1 power
      if ($string =~ m/\(PA\(1\)\*\*1\)/) {
        $string =~ s/\(PA\(1\)\*\*1\)/PA\(1\)/g;
      }
      if ($string =~ m/\(PB\(1\)\*\*1\)/) {
        $string =~ s/\(PB\(1\)\*\*1\)/PB\(1\)/g;
      }
      if ($string =~ m/\(PC\(1\)\*\*1\)/) {
        $string =~ s/\(PC\(1\)\*\*1\)/PC\(1\)/g;
      }

      if ($string =~ m/\(PA\(2\)\*\*1\)/) {
        $string =~ s/\(PA\(2\)\*\*1\)/PA\(2\)/g;
      }
      if ($string =~ m/\(PB\(2\)\*\*1\)/) {
        $string =~ s/\(PB\(2\)\*\*1\)/PB\(2\)/g;
      }
      if ($string =~ m/\(PC\(2\)\*\*1\)/) {
        $string =~ s/\(PC\(2\)\*\*1\)/PC\(2\)/g;
      }

      if ($string =~ m/\(PA\(3\)\*\*1\)/) {
        $string =~ s/\(PA\(3\)\*\*1\)/PA\(3\)/g;
      }
      if ($string =~ m/\(PB\(3\)\*\*1\)/) {
        $string =~ s/\(PB\(3\)\*\*1\)/PB\(3\)/g;
      }
      if ($string =~ m/\(PC\(3\)\*\*1\)/) {
        $string =~ s/\(PC\(3\)\*\*1\)/PC\(3\)/g;
      }

      if ($string =~ m/\(eps\*\*1\)/) {
        $string =~ s/\(eps\*\*1\)/eps/g;
      }

      # Get of 1 multiplied by itself repeatedly
      while ($string =~ m/\*1\*/) {
        $string =~s/\*1\*/\*/g;
      }

      while ($string =~ m/ \+ \(0\)/) {
        $string =~ s/ \+ \(0\)//g;
      }

      # wo(1,1)
      if ($string =~ m/coef\*\(1\*F\(1\)\)/) {
        $string =~ s/coef\*\(1\*F\(1\)\)/coef\*F\(1\)/g;
      }

      if ($string =~ m/\+ -/) {
        $string =~ s/\+ -/- /g;
      }

      if ($string =~ m/\(1\*P/) {
        $string =~ s/\(1\*P/\(P/g;
      }
      if ($string =~ m/ 1\*P/) {
        $string =~ s/ 1\*P/ P/g;
      }
      if ($string =~ m/ 1\*\(/) {
        $string =~ s/ 1\*\(/ (/g;
      }
      if ($string =~ m/\(1\*\(/) {
        $string =~ s/\(1\*\(/\(\(/g;
      }
      # eps = e1
      if ($string =~ m/\*eps\*/) {
        $string =~ s/\*eps\*/\*e1\*/g;
      }
      # (eps**2) = e2
      if ($string =~ m/\(eps\*\*2\)/) {
        $string =~ s/\(eps\*\*2\)/e2/g;
      }
      # (eps**3) = e3
      if ($string =~ m/\(eps\*\*3\)/) {
        $string =~ s/\(eps\*\*3\)/e3/g;
      }
      #**************************************************************
      # End of RegEXP portion here
      #**************************************************************

      # Now, process the output string into 80 character-long lines.
      my $portion = "";
      my $initial = 0;
      my $final = 78;
      if (length($string) > 1) {
        while ($final < length($string)) {
          $portion .= substr($string, $initial, 79);
          $portion .= "&\n";
          $portion .= "&";
          $initial += 79;
          $final += 79;
        }
        $portion .= substr($string, $initial, length($string));
      }
      $portion .= "\n\n";
      print PRI $portion;
      $string = ""; # Reset the string before starting the loops again to prevent
                    # the solutions from concatonating onto each other.
    }
  }
  return $string;
}

# This subroutine prints the formatted nuclear potential integral
# formulas implementing the l1l2switch formalism.
sub printNuc {
  # Declare local variables
  my $string;
  my $nucCodeFile = "NucIntg";
  
  # Open the output file
  open (PRI,">$nucCodeFile") || die "Error opening file.\n";

  print PRI "if (l1l2switch.eq.34) then\n\n";
  $string = &nucOverlap(4,4);
  $string .= &g_gen(4,4);
  print PRI "$string\n";
    
  print PRI "else if (l1l2switch.eq.17) then\n\n";
  $string = &nucOverlap(1,1);
  $string .= &g_gen(1,1);
  print PRI "$string\n";
 
  print PRI "else if (l1l2switch.eq.33) then\n\n";
  $string = &nucOverlap(1,4);
  $string .= &g_gen(1,4);
  print PRI "$string\n";
  
  print PRI "else if (l1l2switch.eq.65) then\n\n";
  $string = &nucOverlap(1,10);
  $string .= &g_gen(1,9);
  print PRI "$string\n";
 
  print PRI "else if (l1l2switch.eq.129) then\n\n";
  $string = &nucOverlap(1,20);
  $string .= &g_gen(1,16);
  print PRI "$string\n";
  
  print PRI "else if (l1l2switch.eq.18) then\n\n";
  $string = &nucOverlap(4,1);
  $string .= &g_gen(4,1);
  print PRI "$string\n";
 
  print PRI "else if (l1l2switch.eq.66) then\n\n";
  $string = &nucOverlap(4,10);
  $string .= &g_gen(4,9);
  print PRI "$string\n";
 
  print PRI "else if (l1l2switch.eq.130) then\n\n";
  $string = &nucOverlap(4,20);
  $string .= &g_gen(4,16);
  print PRI "$string\n";
    
  print PRI "else if (l1l2switch.eq.20) then\n\n";
  $string = &nucOverlap(10,1);
  $string .= &g_gen(9,1);
  print PRI "$string\n";
  
  print PRI "else if (l1l2switch.eq.36) then\n\n";
  $string = &nucOverlap(10,4);
  $string .= &g_gen(9,4);
  print PRI "$string\n";
  
  print PRI "else if (l1l2switch.eq.68) then\n\n";
  $string = &nucOverlap(10,10);
  $string .= &g_gen(9,9);
  print PRI "$string\n";
    
  print PRI "else if (l1l2switch.eq.132) then\n\n";
  $string = &nucOverlap(10,20);
  $string .= &g_gen(9,16);
  print PRI "$string\n";
    
  print PRI "else if (l1l2switch.eq.24) then\n\n";
  $string = &nucOverlap(20,1);
  $string .= &g_gen(16,1);
  print PRI "$string\n";
  
  print PRI "else if (l1l2switch.eq.40) then\n\n";
  $string = &nucOverlap(20,4);
  $string .= &g_gen(16,4);
  print PRI "$string\n";
    
  print PRI "else if (l1l2switch.eq.72) then\n\n";
  $string = &nucOverlap(20,10);
  $string .= &g_gen(16,9);
  print PRI "$string\n";
    
  print PRI "else\n\n";
  $string = &nucOverlap(20,20);
  $string .= &g_gen(16,16);
  print PRI "$string";
  print PRI "end if";
}





























