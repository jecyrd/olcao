#!/usr/bin/env perl

sub printHelp
{
   print <<ENDHELP;
###############################################################################
#Program:  vasp2skl
#Purpose:  This program will read in a vasp output data file and produce an
#          olcao.skl skeleton input file.
#
#USAGE:  vasp2skl [-i \$inputFile] [-a \$atomFile] [-o \$outputFile] [-help]
#
#The -i option takes the name of the input file which is the vasp atomic
#   position file after relaxation.  By default, if this option is
#   not given then the value of \$inputFile is "CONTCAR".  If this default is
#   not found, then it will print a message and default to "POSCAR".
#The -a option takes the name of the file that contains the names of the
#   elements as they appear in the vasp position file (e.g. CONTCAR).  By
#   default, if this option is not given then the value of \$atomFile is
#   "POTCAR".
#The -o option takes the name of the output file.  By default, if this option
#   is not given then the value of \$outputFile is "olcao.skl-relaxed".
###############################################################################
ENDHELP
   exit;
}

#############################################
# BEGIN PROGRAM EXECUTION                   #
#############################################

use strict;
use warnings;
use Env;
use lib "$OLCAO_BIN/perl5";
use ElementData;
use StructureControl;

# Declare global variables.
my $inputFile;
my $atomFile;
my $outputFile;
my $numElements;
my @elementList;
my @atomElement;
my $systemTitle;
my $numAtoms;
my $scale;
my ($a, $b, $c);
my ($alpha, $beta, $gamma);
my (@atomA, @atomB, @atomC);
my $line;
my @values;
my ($i, $j);

# Initialize the default values.
&assignDefaults;

# Parse the command line.
&parseCommandLine;

# Open the files and read preliminary data from POTCAR.
&initEnvironment;

# Read the vasp input file.
&readVASP;

# Print the skeleton file.
&printSkl;

#############################################
# END PROGRAM EXECUTION                     #
#############################################

sub assignDefaults
{
   # Define the default parameter values.
   if (-e "CONTCAR")
      {$inputFile = "CONTCAR";}
   else
      {$inputFile = "POSCAR";}
   $atomFile = "POTCAR";
   $outputFile = "olcao.skl.relaxed";
}

# Parse the command line.
sub parseCommandLine
{
   # Declare local variables.
   my $number = 0;
   my $argument;
   my $commandLine = "command";

   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-i")
         {$inputFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-a")
         {$atomFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-o")
         {$outputFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-help")
         {&printHelp;}
      else
      {
         print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number]. BYE.\n";
         exit;
      }

      if ($number > scalar(@ARGV))
      {
         print STDOUT "Command line overrun.\n";
         print STDOUT "Check command line parameters for missing options.\n";
         die "Aborting\n";
      }
      else
         {$number++;}
   }

   # Record the command line used to shift the skl data.
   open (COMMANDLINE,">>$commandLine");
   print COMMANDLINE "vasp2skl ";
   foreach $argument (0..$#ARGV)
      {print COMMANDLINE "$ARGV[$argument] ";}
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}

# Initialize the environment where the script will execute.
sub initEnvironment
{
   # Open the input, atom, and output files for reading and writing.
   open (VASP,"<$inputFile") || die "Cannot open $inputFile for reading.\n";
   open (SKL,">$outputFile") || die "Cannot open $outputFile for writing.\n";
   open (ATOMS,"<$atomFile") || die "Cannot open $atomFile for reading.\n";

   # Obtain the list of atoms present in the system.
   $numElements = 0;
   while ($line = <ATOMS>)
   {
      if ($line =~ /TITEL/)
      {
         $numElements++;
         chomp ($line);
         @values = split(/\s+/,$line);
         @values = split(/\_/,$values[4]);
         $elementList[$numElements] = lc($values[0]);
      }
   }
   close (ATOMS);
}


# Read the vasp data file and extract all the important data.
sub readVASP
{
   use POSIX;

   my @lineValues;
   my ($ax, $ay, $az);
   my ($bx, $by, $bz);
   my ($cx, $cy, $cz);
   my @atomCounts;
   my $atomCounter;

   # Read the comment line
   $systemTitle = <VASP>;
   chomp $systemTitle;

   # Read the scale line and extract the value from it.
   &getValues;
   $scale = $values[0];

   # Read the three a, b, c lattice vectors in their x, y, z orthogonal format.
   #   Then scale it according to the scale variable and save the individual
   #   components.
   ($ax,$ay,$az) = &getVector ($ax,$ay,$az);
   ($bx,$by,$bz) = &getVector ($bx,$by,$bz);
   ($cx,$cy,$cz) = &getVector ($cx,$cy,$cz);

   # Read the set of atom ranges so that we know how many of each element atom
   #   is present in the system.
   # ========================= 10/28/2010 3:53 pm ============================
   # These extra line here are to make it compatible with VASP 5.2 CONTCAR.

   &getValues;
   @atomCounts = @values;
#   if ($atomCounts[0] * 1 eq $atomCounts[0])
   if ($atomCounts[0] !~ /[a-zA-Z]/)
      {print "CONTCAR file from VASP 4.6\n";}
   else
   {
	   print "CONTCAR file from VASP 5.2 \n";
	   &getValues;
	   @atomCounts = @values;
   }
   # =========================================================================
   # Compute the total number of atoms.
   $numAtoms = 0;
   for ($i=0;$i<=$#values;$i++)
      {$numAtoms+=$values[$i];}

   # Determine the element for each atom.
   #   The number of atoms of each element is in @atomCounts.
   #   $atomCounter is the index for each atom in the system.
   #   @atomElement is the element name for each atom.
   #   @elementList is the list of elements in the system.
   $atomCounter = 0;
   for ($i=1;$i<=$numElements;$i++)
   {
      for ($j=1;$j<=$atomCounts[$i-1];$j++) # Note the -1.  It starts at 0.
      {
         $atomCounter++;
         $atomElement[$atomCounter] = $elementList[$i];
      }
   }

   # Compute the cell parameters.
   $a = sqrt($ax*$ax+$ay*$ay+$az*$az);
   $b = sqrt($bx*$bx+$by*$by+$bz*$bz);
   $c = sqrt($cx*$cx+$cy*$cy+$cz*$cz);
   $alpha = acos(($bx*$cx+$by*$cy+$bz*$cz)/($b*$c))/3.1415926535*180.0;
   $beta  = acos(($ax*$cx+$ay*$cy+$az*$cz)/($a*$c))/3.1415926535*180.0;
   $gamma = acos(($ax*$bx+$ay*$by+$az*$bz)/($a*$b))/3.1415926535*180.0;

   # Read the label for the atom positions ("direct").
   $line = <VASP>;
   ########======================================================
   # This extra features added here will also work in CONTCAR 
   # from VASP 5.2 and also if selective dynamics is used.
   # split this  line and check if it has Direct or not
   @lineValues = split(/\s+/, $line);
   if ($lineValues[0] eq "")
      {shift @lineValues;}
   if (lc($lineValues[0]) ne  "direct")
      {$line = <VASP>;}
   #print $line;
   ######========================================================
   # Read the atom positions.
   for ($i=1;$i<=$numAtoms;$i++)
   {
      # Get the current line with atom positions and split it into values.
      &getValues;

      # Extract the fractional coordinate atom positions.
      $atomA[$i] = $values[0];
      $atomB[$i] = $values[1];
      $atomC[$i] = $values[2];
   }

   # Close the VASP input file.
   close (VASP);
}

sub printSkl
{
   # Print the header for the skl file.
   print SKL <<HEADER;
title
$systemTitle
end
cell
HEADER

   # Print the cell parameters.
   printf SKL ("%10.6f %10.6f %10.6f %10.6f %10.6f %10.6f\n",
        $a,$b,$c,$alpha,$beta,$gamma);

   # Print out the atom positions.
   print SKL "fractional $numAtoms\n";
   for ($i=1;$i<=$numAtoms;$i++)
      {printf SKL ("%-4s %15.9f %15.9f %15.9f\n",$atomElement[$i],$atomA[$i],$atomB[$i],$atomC[$i]);}

   # Print out the trailing information
   print SKL <<TRAILING;
space 1_a
supercell 1 1 1
prim
TRAILING

   # Close the SKL output file.
   close (SKL);
}

sub getVector
{
   # Declare local variables.
   my ($x, $y, $z);

   # Get the passed x, y, z vector.
   $x = $_[0];
   $y = $_[1];
   $z = $_[2];

   # Read the line for this lattice vector.
   &getValues;

   # Scale the vector and save its components.
   ($x, $y, $z) = ($scale*$values[0], $scale*$values[1], $scale*$values[2]);

   return ($x, $y, $z);
}

sub getValues
{
   # Read the line, split it, and shift it to get ride of leading white space.
   $line = <VASP>;
   chomp ($line);
   @values = split (/\s+/,$line);
   if ($values[0] eq "")
      {shift @values;}
}
