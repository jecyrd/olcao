#!/usr/bin/env perl
sub printHelp
{
   print <<ENDHELP;
###############################################################################
# PROGRAM:  batchSub
# PURPOSE:  This program will submit a requested sequence of jobs.
#
# USAGE:    batchSub [-n \$numJobs] [-b \$batchFile] [-t \$targetTag] | -help
#
# The -n option specifies the number of jobs from the batch list to be
#   submitted.  If not given, then the default value of 5 is used.
# The -b option specifies the name of the batch list file to use.  If not given
#   then the default value of "batchList" is used.
# The -t option specifies which tag number to apply the next series of
#   submissions too.  (e.g. If the value given is a 0, then the next \$numJobs
#   jobs that have the ID tag of "0" will be submitted and the ID tag for those
#   jobs will be incremented.) If not given, then the default value of 0 is
#   used.
# The -help option prints this friendly message.
###############################################################################
ENDHELP
   exit;
}

##################################################
# BEGIN EXECUTION ################################
##################################################


# Use necessary modules.
use strict;
use warnings;
use Env;
use lib "$OLCAO_BIN/perl5";
use StructureControl;

# Declare global variables.
my $numJobs;
my $batchFile;
my $targetTag;
my @batchList;
my @dirName;
my @tagNumber;

# Initialize the environment.
&initEnv;

# Parse the command line.
&parseCommandLine;

# Read the current batch list.
&readBatchList;

# Issue submission commands in requested directories.
&issueSubmission;

# Print the newly modified batch list.
&printBatchList;

##################################################
# END EXECUTION ##################################
##################################################


sub initEnv
{
   # Define local variables.
   
   $numJobs = 5;
   $batchFile = "batchList";
   $targetTag = 0;
}


sub parseCommandLine
{
   # Define local variables.
   my $number = 0;
   my $argument;
   my $commandLine = "command";

   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-n")
         {$numJobs = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-b")
         {$batchFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-t")
         {$targetTag = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-help")
         {&printHelp;}
      else
      {
         print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number].\n";
         exit;
      }
      $number++;
   }

   #Record the command line used to create this set of input files.
   open (COMMANDLINE,">>$commandLine");
   print COMMANDLINE "batchSub ";
   foreach $argument (0..$#ARGV)
      {print COMMANDLINE "$ARGV[$argument] ";}
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}


sub readBatchList
{
   # Define local variables.
   my $submission;
   my @values;

   # Open the batch submission list.
   open (LIST,"<$batchFile") || die "Cannot open $batchFile for reading.\n";

   # Read the whole list of directories.
   @batchList = <LIST>;

   # Extract out the directory names and tag ID numbers.
   foreach $submission (0..$#batchList)
   {
      @values = StructureControl::prepLine("",$batchList[$submission],'\s+');
      $dirName[$submission] = $values[0];
      $tagNumber[$submission] = $values[1];
   }

   # Close the batch submission list.
   close (LIST);
}



sub issueSubmission
{
   # Define local variables.
   my $numSubmitted = 0;
   my $currJob;

   # Look through the list of tag numbers to find the next $numJobs jobs.  When
   #   each job is found, then submit the job and update the counter.
   foreach $currJob (0..$#tagNumber)
   {
      if ($tagNumber[$currJob] == $targetTag)
      {
         # Increment the number of submitted jobs.
         $numSubmitted++;

         # Increment the tag ID number for this job.
         $tagNumber[$currJob]++;

         # Submit the job according to the job submission mechanism present.
         &submit($currJob);
      }

      # Abort the loop when the last requested job has been submitted.
      if ($numSubmitted == $numJobs)
         {last;}
   }
}


sub submit
{
   # Define passed parameters.
   my $currJob = $_[0];

   # Perform actual submission.
   if (-e "$dirName[$currJob]/lsf")
      {system ("bsub < $dirName[$currJob]/lsf");}
   elsif (-e "$dirName[$currJob]/pbs")
      {system ("qsub $dirName[$currJob]/pbs");}
   elsif (-e "$dirName[$currJob]/slurm")
      {system ("sbatch $dirName[$currJob]/slurm");}
   elsif (-e "./$dirName[$currJob]/submit")
   {
      chdir ("$dirName[$currJob]");
      system ("./submit &");
      chdir ("..");
   }

   # Perform dry run only.
#   if (-e "$dirName[$currJob]/lsf")
#      {print STDOUT "bsub < $dirName[$currJob]/lsf\n";}
#   elsif (-e "$dirName[$currJob]/pbs")
#      {print STDOUT "qsub $dirName[$currJob]/pbs\n";}
#   elsif (-e "$dirName[$currJob]/submit")
#      {print STDOUT "./$dirName[$currJob]/submit &\n";}
}


# Record the batch list to file, overwriting the original list.
sub printBatchList
{
   # Define loval variables,
   my $job;
#   my $outFile = "testList";

   # Open the file for writing.
   open (LIST,">$batchFile") || die "Cannot open $batchFile for writing.\n";

   # Loop through all the directory names and print then and their new tag ID
   #   numbers.
   foreach $job (0..$#tagNumber)
      {print LIST "$dirName[$job]   $tagNumber[$job]\n";}

   # Close the file.
   close (LIST);
}
