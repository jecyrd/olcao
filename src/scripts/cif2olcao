#!/usr/bin/env perl
sub printHelp
{
   print STDOUT <<ENDHELP;
###############################################################################
#Program:  cif2olcao
#Purpose:  This program will convert a crystallographic information file (.cif)
#          into an olcao input file.  This will also produce a mapping
#          between the cif file atoms and the olcao atoms.
#Written by:  Paul Rulis
#Last modified:  April 29, 2009
#
#USAGE:  cif2olcao [-i \$cifInputFile] [-o \$olcaoOutputFile] [-cifspecies]
#                  [-help]
#
#The -i option is used to request that a specific input file be used for the
#   conversion.  If this option is not given, then the default value for the
#   input file is model.cif.
#The -o option is used to request that a specific output file be written to
#   for the conversion.  If this option is not given, then the default value
#   for the output file is olcao.dat.
#The -cifspecies option will require that the olcao.dat file use the species as
#   defined in the cif file.  The default is to have no species assigned.
#The -help option prints this useful message.
###############################################################################
ENDHELP
   exit;
}

# BEGIN PROGRAM EXECUTION #################

# Use necessary modules.
use strict;
use warnings;
use Env;
use POSIX qw(ceil floor);
use lib "$OLCAO_BIN/perl5";
use StructureControl;
use ElementData;

# Declare global variables.
my $cifSpecies;
my $cifFile;
my $olcaoFile;

# Set default values for various file names.
&setDefaults;

# Read the command line for requested options.
&parseCommandLine;

# Open output files for writing.
&initEnvironment;

# Read the CIF input file and store/calculate all the important information.
StructureControl::readInputFile($cifFile,$cifSpecies);

# Print the olcao input file.
StructureControl::printOLCAO(\*OLCAO,"Generated from CIF file.","cartesian");

###########################################
# END PROGRAM EXECUTION ###################
###########################################

sub setDefaults
{
   # Define the default file names.
   $cifFile  = "model.cif";
   $olcaoFile = "olcao.skl";

   # Assign default behavior for species assignment.
   $cifSpecies = 0;
}

sub parseCommandLine
{
   # Define local variables.
   my $number=0;
   my $argument;
   my $commandLine = "command";

   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-i")
         {$cifFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-o")
         {$olcaoFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-cifspecies")
         {$cifSpecies = 1;}
      elsif ($ARGV[$number] eq "-help")
         {&printHelp;}
      else
         {die "Unknown command line parameter.  Aborting\n";}

      $number++;
   }

   #Record the command line used to create this set of input files.
   open (COMMANDLINE,">>$commandLine");
   print COMMANDLINE "cif2olcao ";
   foreach $argument (0..$#ARGV)
      {print COMMANDLINE "$ARGV[$argument] ";}
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}

sub initEnvironment
{
   # Open all files for writing.
   open (OLCAO,">$olcaoFile") || die "Cannot open $olcaoFile for writing.\n";

   # Initialize the element data from the database.
   ElementData::initElementData;
}
